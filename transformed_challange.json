[
    {
        "function_name": "can_form_abc_with_single_swap",
        "prompt": "There are three cards with letters $\\texttt{a}$, $\\texttt{b}$, $\\texttt{c}$ placed in a row in some order. You can do the following operation at most once: \n\n \n-  Pick two cards, and swap them.  Is it possible that the row becomes $\\texttt{abc}$ after the operation? Output \"YES\" if it is possible, and \"NO\" otherwise.\n\nInput\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 6$)\u00a0\u2014 the number of test cases.\n\nThe only line of each test case contains a single string consisting of each of the three characters $\\texttt{a}$, $\\texttt{b}$, and $\\texttt{c}$ exactly once, representing the cards.\n\nOutput\n\nFor each test case, output \"YES\" if you can make the row $\\texttt{abc}$ with at most one operation, or \"NO\" otherwise.\n\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).Sample Input 1:\n6\n\nabc\n\nacb\n\nbac\n\nbca\n\ncab\n\ncba\n\n\n\nSample Output 1:\n\nYES\nYES\nYES\nNO\nNO\nYES\n\n\nNote\n\nIn the first test case, we don't need to do any operations, since the row is already $\\texttt{abc}$.\n\nIn the second test case, we can swap $\\texttt{c}$ and $\\texttt{b}$: $\\texttt{acb} \\to \\texttt{abc}$.\n\nIn the third test case, we can swap $\\texttt{b}$ and $\\texttt{a}$: $\\texttt{bac} \\to \\texttt{abc}$.\n\nIn the fourth test case, it is impossible to make $\\texttt{abc}$ using at most one operation.",
        "test_code": ""
    },
    {
        "function_name": "maximize_product_with_single_increment",
        "prompt": "Slavic is preparing a present for a friend's birthday. He has an array $a$ of $n$ digits and the present will be the product of all these digits. Because Slavic is a good kid who wants to make the biggest product possible, he wants to add $1$ to exactly one of his digits. \n\nWhat is the maximum product Slavic can make?\n\nInput\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\leq n \\leq 9$)\u00a0\u2014 the number of digits.\n\nThe second line of each test case contains $n$ space-separated integers $a_i$ ($0 \\leq a_i \\leq 9$)\u00a0\u2014 the digits in the array.\n\nOutput\n\nFor each test case, output a single integer\u00a0\u2014 the maximum product Slavic can make, by adding $1$ to exactly one of his digits.Sample Input 1:\n4\n\n4\n\n2 2 1 2\n\n3\n\n0 1 2\n\n5\n\n4 3 2 3 4\n\n9\n\n9 9 9 9 9 9 9 9 9\n\n\n\nSample Output 1:\n\n16\n2\n432\n430467210\n",
        "test_code": ""
    },
    {
        "function_name": "minimum_white_operations_to_clear_black_cells",
        "prompt": "You are given a strip of paper $s$ that is $n$ cells long. Each cell is either black or white. In an operation you can take any $k$ consecutive cells and make them all white.\n\nFind the minimum number of operations needed to remove all black cells.\n\nInput\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\leq k \\leq n \\leq 2 \\cdot 10^5$)\u00a0\u2014 the length of the paper and the integer used in the operation.\n\nThe second line of each test case contains a string $s$ of length $n$ consisting of characters $\\texttt{B}$ (representing a black cell) or $\\texttt{W}$ (representing a white cell).\n\nThe sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nOutput\n\nFor each test case, output a single integer\u00a0\u2014 the minimum number of operations needed to remove all black cells.Sample Input 1:\n8\n\n6 3\n\nWBWWWB\n\n7 3\n\nWWBWBWW\n\n5 4\n\nBWBWB\n\n5 5\n\nBBBBB\n\n8 2\n\nBWBWBBBB\n\n10 2\n\nWBBWBBWBBW\n\n4 1\n\nBBBB\n\n3 2\n\nWWW\n\n\n\nSample Output 1:\n\n2\n1\n2\n1\n4\n3\n4\n0\n\n\nNote\n\nIn the first test case you can perform the following operations: $$\\color{red}{\\texttt{WBW}}\\texttt{WWB} \\to \\texttt{WWW}\\color{red}{\\texttt{WWB}} \\to \\texttt{WWWWWW}$$\n\nIn the second test case you can perform the following operations: $$\\texttt{WW}\\color{red}{\\texttt{BWB}}\\texttt{WW} \\to \\texttt{WWWWWWW}$$\n\nIn the third test case you can perform the following operations: $$\\texttt{B}\\color{red}{\\texttt{WBWB}} \\to \\color{red}{\\texttt{BWWW}}\\texttt{W} \\to \\texttt{WWWWW}$$",
        "test_code": ""
    },
    {
        "function_name": "can_form_palindrome_after_k_deletions",
        "prompt": "You are given a string $s$ of length $n$, consisting of lowercase Latin letters, and an integer $k$.\n\nYou need to check if it is possible to remove exactly $k$ characters from the string $s$ in such a way that the remaining characters can be rearranged to form a palindrome. Note that you can reorder the remaining characters in any way.\n\nA palindrome is a string that reads the same forwards and backwards. For example, the strings \"z\", \"aaa\", \"aba\", \"abccba\" are palindromes, while the strings \"codeforces\", \"reality\", \"ab\" are not.\n\nInput\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of the test cases. This is followed by their description.\n\nThe first line of each test case contains two integers $n$ and $k$ ($0 \\leq k < n \\leq 10^5$) \u2014 the length of the string $s$ and the number of characters to be deleted.\n\nThe second line of each test case contains a string $s$ of length $n$, consisting of lowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nOutput\n\nFor each test case, output \"YES\" if it is possible to remove exactly $k$ characters from the string $s$ in such a way that the remaining characters can be rearranged to form a palindrome, and \"NO\" otherwise.\n\nYou can output the answer in any case (uppercase or lowercase). For example, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as positive answers.Sample Input 1:\n14\n\n1 0\n\na\n\n2 0\n\nab\n\n2 1\n\nba\n\n3 1\n\nabb\n\n3 2\n\nabc\n\n6 2\n\nbacacd\n\n6 2\n\nfagbza\n\n6 2\n\nzwaafa\n\n7 2\n\ntaagaak\n\n14 3\n\nttrraakkttoorr\n\n5 3\n\ndebdb\n\n5 4\n\necadc\n\n5 3\n\ndebca\n\n5 3\n\nabaac\n\n\n\nSample Output 1:\n\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nNO\nYES\n\n\nNote\n\nIn the first test case, nothing can be removed, and the string \"a\" is a palindrome.\n\nIn the second test case, nothing can be removed, but the strings \"ab\" and \"ba\" are not palindromes.\n\nIn the third test case, any character can be removed, and the resulting string will be a palindrome.\n\nIn the fourth test case, one occurrence of the character \"a\" can be removed, resulting in the string \"bb\", which is a palindrome.\n\nIn the sixth test case, one occurrence of the characters \"b\" and \"d\" can be removed, resulting in the string \"acac\", which can be rearranged to the string \"acca\".\n\nIn the ninth test case, one occurrence of the characters \"t\" and \"k\" can be removed, resulting in the string \"aagaa\", which is a palindrome.",
        "test_code": ""
    },
    {
        "function_name": "min_operations_for_product_divisibility",
        "prompt": "You are given an array of integers $a_1, a_2, \\ldots, a_n$ and a number $k$ ($2 \\leq k \\leq 5$). In one operation, you can do the following:\n\n\n-  Choose an index $1 \\leq i \\leq n$,\n-  Set $a_i = a_i + 1$.Find the minimum number of operations needed to make the product of all the numbers in the array $a_1 \\cdot a_2 \\cdot \\ldots \\cdot a_n$ divisible by $k$.\n\nInput\n\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 10^4$) \u2014 the number of test cases. Then follows the description of the test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($2 \\leq n \\leq 10^5$, $2 \\leq k \\leq 5$) \u2014 the size of the array $a$ and the number $k$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10$).\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nOutput\n\nFor each test case, output the minimum number of operations needed to make the product of all the numbers in the array divisible by $k$.Sample Input 1:\n15\n\n2 5\n\n7 3\n\n3 3\n\n7 4 1\n\n5 2\n\n9 7 7 3 9\n\n5 5\n\n5 4 1 2 3\n\n7 4\n\n9 5 1 5 9 5 1\n\n3 4\n\n6 3 6\n\n3 4\n\n6 1 5\n\n3 4\n\n1 5 9\n\n4 4\n\n1 4 1 1\n\n3 4\n\n3 5 3\n\n4 5\n\n8 9 9 3\n\n2 5\n\n1 6\n\n2 5\n\n10 10\n\n4 5\n\n1 6 1 1\n\n2 5\n\n7 7\n\n\n\nSample Output 1:\n\n2\n2\n1\n0\n2\n0\n1\n2\n0\n1\n1\n4\n0\n4\n3\n\n\nNote\n\nIn the first test case, we need to choose the index $i = 2$ twice. After that, the array will be $a = [7, 5]$. The product of all the numbers in the array is $35$.\n\nIn the fourth test case, the product of the numbers in the array is $120$, which is already divisible by $5$, so no operations are needed.\n\nIn the eighth test case, we can perform two operations by choosing $i = 2$ and $i = 3$ in any order. After that, the array will be $a = [1, 6, 10]$. The product of the numbers in the array is $60$.",
        "test_code": ""
    },
    {
        "function_name": "determine_game_winner_by_modulo3_and_turns",
        "prompt": "Vanya and Vova are playing a game. Players are given an integer $n$. On their turn, the player can add $1$ to the current integer or subtract $1$. The players take turns; Vanya starts. If after Vanya's move the integer is divisible by $3$, then he wins. If $10$ moves have passed and Vanya has not won, then Vova wins.\n\nWrite a program that, based on the integer $n$, determines who will win if both players play optimally.\n\nInput\n\nThe first line contains the integer $t$ ($1 \\leq t \\leq 100$)\u00a0\u2014 the number of test cases.\n\nThe single line of each test case contains the integer $n$ ($1 \\leq n \\leq 1000$).\n\nOutput\n\nFor each test case, print \"First\" without quotes if Vanya wins, and \"Second\" without quotes if Vova wins.Sample Input 1:\n6\n\n1\n\n3\n\n5\n\n100\n\n999\n\n1000\n\n\n\nSample Output 1:\n\nFirst\nSecond\nFirst\nFirst\nSecond\nFirst\n",
        "test_code": ""
    },
    {
        "function_name": "compute_max_truck_weight_difference",
        "prompt": "Alex is participating in the filming of another video of BrMeast, and BrMeast asked Alex to prepare 250 thousand tons of TNT, but Alex didn't hear him well, so he prepared $n$ boxes and arranged them in a row waiting for trucks. The $i$-th box from the left weighs $a_i$ tons.\n\nAll trucks that Alex is going to use hold the same number of boxes, denoted by $k$. Loading happens the following way:\n\n \n-  The first $k$ boxes goes to the first truck, \n-  The second $k$ boxes goes to the second truck, \n-  $\\dotsb$ \n-  The last $k$ boxes goes to the $\\frac{n}{k}$-th truck. Upon loading is completed, each truck must have exactly $k$ boxes. In other words, if at some point it is not possible to load exactly $k$ boxes into the truck, then the loading option with that $k$ is not possible.\n\nAlex hates justice, so he wants the maximum absolute difference between the total weights of two trucks to be as great as possible. If there is only one truck, this value is $0$.\n\nAlex has quite a lot of connections, so for every $1 \\leq k \\leq n$, he can find a company such that each of its trucks can hold exactly $k$ boxes. Print the maximum absolute difference between the total weights of any two trucks.\n\nInput\n\nThe first line contains one integer $t$ ($1 \\leq t \\leq 10^4$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 150\\,000$)\u00a0\u2014 the number of boxes.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the weights of the boxes.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $150\\,000$.\n\nOutput\n\nFor each test case, print a single integer\u00a0\u2014 the answer to the problem.Sample Input 1:\n5\n\n2\n\n1 2\n\n6\n\n10 2 3 6 1 3\n\n4\n\n1000000000 1000000000 1000000000 1000000000\n\n15\n\n60978 82265 78961 56708 39846 31071 4913 4769 29092 91348 64119 72421 98405 222 14294\n\n8\n\n19957 69913 37531 96991 57838 21008 14207 19198\n\n\n\nSample Output 1:\n\n1\n9\n0\n189114\n112141\n\n\nNote\n\nIn the first case, we should pick two trucks, so the first one will have only the first box, and the second one will have only the second box.\n\nIn the second case, we should pick six trucks, so the maximum will be $10$, the minimum will be $1$, and the answer is $10 - 1 = 9$.\n\nIn the third case, for any possible $k$, the trucks will have the same total weight of boxes, so the answer is $0$.",
        "test_code": ""
    },
    {
        "function_name": "max_alternating_parity_subarray_sum",
        "prompt": "A subarray is a continuous part of array.\n\nYarik recently found an array $a$ of $n$ elements and became very interested in finding the maximum sum of a non empty subarray. However, Yarik doesn't like consecutive integers with the same parity, so the subarray he chooses must have alternating parities for adjacent elements.\n\nFor example, $[1, 2, 3]$ is acceptable, but $[1, 2, 4]$ is not, as $2$ and $4$ are both even and adjacent.\n\nYou need to help Yarik by finding the maximum sum of such a subarray.\n\nInput\n\nThe first line contains an integer $t$ $(1 \\le t \\le 10^4)$\u00a0\u2014 number of test cases. Each test case is described as follows.\n\nThe first line of each test case contains an integer $n$ $(1 \\le n \\le 2 \\cdot 10^5)$\u00a0\u2014 length of the array.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ $(-10^3 \\le a_i \\le 10^3)$\u00a0\u2014 elements of the array.\n\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $2 \\cdot 10^5$.\n\nOutput\n\nFor each test case, output a single integer\u00a0\u2014 the answer to the problem.Sample Input 1:\n7\n\n5\n\n1 2 3 4 5\n\n4\n\n9 9 8 8\n\n6\n\n-1 4 -1 0 5 -4\n\n4\n\n-1 2 4 -3\n\n1\n\n-1000\n\n3\n\n101 -99 101\n\n20\n\n-10 5 -8 10 6 -10 7 9 -2 -6 7 2 -4 6 -1 7 -6 -7 4 1\n\n\n\nSample Output 1:\n\n15\n17\n8\n4\n-1000\n101\n10\n",
        "test_code": ""
    },
    {
        "function_name": "count_equal_power_note_pairs",
        "prompt": "Yarik is a big fan of many kinds of music. But Yarik loves not only listening to music but also writing it. He likes electronic music most of all, so he has created his own system of music notes, which, in his opinion, is best for it.\n\nSince Yarik also likes informatics, in his system notes are denoted by integers of $2^k$, where $k \\ge 1$\u00a0\u2014 a positive integer. But, as you know, you can't use just notes to write music, so Yarik uses combinations of two notes. The combination of two notes $(a, b)$, where $a = 2^k$ and $b = 2^l$, he denotes by the integer $a^b$.\n\nFor example, if $a = 8 = 2^3$, $b = 4 = 2^2$, then the combination $(a, b)$ is denoted by the integer $a^b = 8^4 = 4096$. Note that different combinations can have the same notation, e.g., the combination $(64, 2)$ is also denoted by the integer $4096 = 64^2$.\n\nYarik has already chosen $n$ notes that he wants to use in his new melody. However, since their integers can be very large, he has written them down as an array $a$ of length $n$, then the note $i$ is $b_i = 2^{a_i}$. The integers in array $a$ can be repeated.\n\nThe melody will consist of several combinations of two notes. Yarik was wondering how many pairs of notes $b_i, b_j$ $(i < j)$ exist such that the combination $(b_i, b_j)$ is equal to the combination $(b_j, b_i)$. In other words, he wants to count the number of pairs $(i, j)$ $(i < j)$ such that $b_i^{b_j} = b_j^{b_i}$. Help him find the number of such pairs.\n\nInput\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$)\u00a0\u2014 the length of the arrays.\n\nThe next line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 array $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nOutput\n\nFor each test case, output the number of pairs that satisfy the given condition.Sample Input 1:\n5\n\n1\n\n2\n\n4\n\n3 1 3 2\n\n2\n\n1000 1000\n\n3\n\n1 1 1\n\n19\n\n2 4 1 6 2 8 5 4 2 10 5 10 8 7 4 3 2 6 10\n\n\n\nSample Output 1:\n\n0\n2\n1\n3\n19\n",
        "test_code": ""
    },
    {
        "function_name": "count_passengers_over_sixty",
        "prompt": "You are given a 0-indexed array of strings details. Each element of details provides information about a given passenger compressed into a string of length 15. The system is such that:\n\nThe first ten characters consist of the phone number of passengers.\nThe next character denotes the gender of the person.\nThe following two characters are used to indicate the age of the person.\nThe last two characters determine the seat allotted to that person.\n\nReturn the number of passengers who are strictly more than 60 years old.\n \nExample 1:\n\nInput: details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]\nOutput: 2\nExplanation: The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old.\n\nExample 2:\n\nInput: details = [\"1313579440F2036\",\"2921522980M5644\"]\nOutput: 0\nExplanation: None of the passengers are older than 60.\n\n \nConstraints:\n\n1 <= details.length <= 100\ndetails[i].length == 15\ndetails[i] consists of digits from '0' to '9'.\ndetails[i][10] is either 'M' or 'F' or 'O'.\nThe phone numbers and seat numbers of the passengers are distinct.",
        "test_code": ""
    },
    {
        "function_name": "calculate_matrix_max_removal_score",
        "prompt": "You are given a 0-indexed 2D integer array nums. Initially, your score is 0. Perform the following operations until the matrix becomes empty:\n\nFrom each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.\nIdentify the highest number amongst all those removed in step 1. Add that number to your score.\n\nReturn the final score.\n \nExample 1:\n\nInput: nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]\nOutput: 15\nExplanation: In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15.\n\nExample 2:\n\nInput: nums = [[1]]\nOutput: 1\nExplanation: We remove 1 and add it to the answer. We return 1.\n \nConstraints:\n\n1 <= nums.length <= 300\n1 <= nums[i].length <= 500\n0 <= nums[i][j] <= 10^3",
        "test_code": ""
    },
    {
        "function_name": "maximize_bitwise_or_with_doubling_operations",
        "prompt": "You are given a 0-indexed integer array nums of length n and an integer k. In an operation, you can choose an element and multiply it by 2.\nReturn the maximum possible value of nums[0] | nums[1] | ... | nums[n - 1] that can be obtained after applying the operation on nums at most k times.\nNote that a | b denotes the bitwise or between two integers a and b.\n \nExample 1:\n\nInput: nums = [12,9], k = 1\nOutput: 30\nExplanation: If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30.\n\nExample 2:\n\nInput: nums = [8,1,2], k = 2\nOutput: 35\nExplanation: If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9\n1 <= k <= 15",
        "test_code": ""
    },
    {
        "function_name": "calculate_max_group_strength",
        "prompt": "You are given a 0-indexed integer array nums representing the score of students in an exam. The teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices i_0, i_1, i_2, ... , i_k is defined as nums[i_0] * nums[i_1] * nums[i_2] * ... * nums[i_k\u200b].\nReturn the maximum strength of a group the teacher can create.\n \nExample 1:\n\nInput: nums = [3,-1,-5,2,5,-9]\nOutput: 1350\nExplanation: One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.\n\nExample 2:\n\nInput: nums = [-4,-5,-4]\nOutput: 20\nExplanation: Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength.\n\n \nConstraints:\n\n1 <= nums.length <= 13\n-9 <= nums[i] <= 9",
        "test_code": ""
    },
    {
        "function_name": "min_extra_chars_after_dict_partitioning",
        "prompt": "You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings.\nReturn the minimum number of extra characters left over if you break up s optimally.\n \nExample 1:\n\nInput: s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]\nOutput: 1\nExplanation: We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.\n\n\nExample 2:\n\nInput: s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]\nOutput: 3\nExplanation: We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.\n\n \nConstraints:\n\n1 <= s.length <= 50\n1 <= dictionary.length <= 50\n1 <= dictionary[i].length <= 50\ndictionary[i] and s consists of only lowercase English letters\ndictionary contains distinct words",
        "test_code": ""
    },
    {
        "function_name": "calculate_leftover_after_cheapest_chocolate_pair_purchase",
        "prompt": "You are given an integer array prices representing the prices of various chocolates in a store. You are also given a single integer money, which represents your initial amount of money.\nYou must buy exactly two chocolates in such a way that you still have some non-negative leftover money. You would like to minimize the sum of the prices of the two chocolates you buy.\nReturn the amount of money you will have leftover after buying the two chocolates. If there is no way for you to buy two chocolates without ending up in debt, return money. Note that the leftover must be non-negative.\n \nExample 1:\n\nInput: prices = [1,2,2], money = 3\nOutput: 0\nExplanation: Purchase the chocolates priced at 1 and 2 units respectively. You will have 3 - 3 = 0 units of money afterwards. Thus, we return 0.\n\nExample 2:\n\nInput: prices = [3,2,3], money = 3\nOutput: 3\nExplanation: You cannot buy 2 chocolates without going in debt, so we return 3.\n\n \nConstraints:\n\n2 <= prices.length <= 50\n1 <= prices[i] <= 100\n1 <= money <= 100",
        "test_code": ""
    },
    {
        "function_name": "count_takahashi_occurrences",
        "prompt": "You are given N strings.\nThe i-th string S_i (1 \\leq i \\leq N) is either Takahashi or Aoki.\nHow many i are there such that S_i is equal to Takahashi?\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nS_1\r\nS_2\r\n\\vdots\r\nS_N\n\nOutput\n\nPrint the count of i such that S_i is equal to Takahashi as an integer in a single line.\n\nConstraints\n\n\n- 1 \\leq N \\leq 100\n- N is an integer.\n- Each S_i is Takahashi or Aoki. (1 \\leq i \\leq N)\n\nSample Input 1\n\n3\r\nAoki\r\nTakahashi\r\nTakahashi\n\nSample Output 1\n\n2\r\n\nS_2 and S_3 are equal to Takahashi, while S_1 is not.\nTherefore, print 2.\n\nSample Input 2\n\n2\r\nAoki\r\nAoki\n\nSample Output 2\n\n0\r\n\nIt is possible that no S_i is equal to Takahashi.\n\nSample Input 3\n\n20\r\nAoki\r\nTakahashi\r\nTakahashi\r\nAoki\r\nAoki\r\nAoki\r\nAoki\r\nTakahashi\r\nAoki\r\nAoki\r\nAoki\r\nTakahashi\r\nTakahashi\r\nAoki\r\nTakahashi\r\nAoki\r\nAoki\r\nAoki\r\nAoki\r\nTakahashi\n\nSample Output 3\n\n7",
        "test_code": ""
    },
    {
        "function_name": "count_colors_with_one_person_apart",
        "prompt": "There are 2N people standing in a row, and the person at the i-th position from the left is wearing clothes of color A_i. Here, the clothes have N colors from 1 to N, and exactly two people are wearing clothes of each color.\nFind how many of the integers i=1,2,\\ldots,N satisfy the following condition:\n\n- There is exactly one person between the two people wearing clothes of color i.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\ldots A_{2N}\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- 1 \\leq A_i \\leq N\n- Each integer from 1 through N appears exactly twice in A.\n- All input values are integers.\n\nSample Input 1\n\n3\r\n1 2 1 3 2 3\n\nSample Output 1\n\n2\r\n\nThere are two values of i that satisfy the condition: 1 and 3.\nIn fact, the people wearing clothes of color 1 are at the 1st and 3rd positions from the left, with exactly one person in between.\n\nSample Input 2\n\n2\r\n1 1 2 2\n\nSample Output 2\n\n0\r\n\nThere may be no i that satisfies the condition.\n\nSample Input 3\n\n4\r\n4 3 2 3 2 1 4 1\n\nSample Output 3\n\n3",
        "test_code": ""
    },
    {
        "function_name": "calculate_minimum_tile_toll",
        "prompt": "The coordinate plane is covered with 2\\times1 tiles. The tiles are laid out according to the following rules:\n\n- For an integer pair (i,j), the square A _ {i,j}=\\lbrace(x,y)\\mid i\\leq x\\leq i+1\\wedge j\\leq y\\leq j+1\\rbrace is contained in one tile.\n- When i+j is even, A _ {i,j} and A _ {i + 1,j} are contained in the same tile.\n\nTiles include their boundaries, and no two different tiles share a positive area.\nNear the origin, the tiles are laid out as follows:\n\nTakahashi starts at the point (S _ x+0.5,S _ y+0.5) on the coordinate plane.\nHe can repeat the following move as many times as he likes:\n\n- Choose a direction (up, down, left, or right) and a positive integer n. Move n units in that direction.\n\nEach time he enters a tile, he pays a toll of 1.\nFind the minimum toll he must pay to reach the point (T _ x+0.5,T _ y+0.5).\n\nInput\n\nThe input is given from Standard Input in the following format:\nS _ x S _ y\r\nT _ x T _ y\n\nOutput\n\nPrint the minimum toll Takahashi must pay.\n\nConstraints\n\n\n- 0\\leq S _ x\\leq2\\times10 ^ {16}\n- 0\\leq S _ y\\leq2\\times10 ^ {16}\n- 0\\leq T _ x\\leq2\\times10 ^ {16}\n- 0\\leq T _ y\\leq2\\times10 ^ {16}\n- All input values are integers.\n\nSample Input 1\n\n5 0\r\n2 5\n\nSample Output 1\n\n5\r\n\nFor example, Takahashi can pay a toll of 5 by moving as follows:\n\n\n- Move left by 1. Pay a toll of 0.\n- Move up by 1. Pay a toll of 1.\n- Move left by 1. Pay a toll of 0.\n- Move up by 3. Pay a toll of 3.\n- Move left by 1. Pay a toll of 0.\n- Move up by 1. Pay a toll of 1.\n\nIt is impossible to reduce the toll to 4 or less, so print 5.\n\nSample Input 2\n\n3 1\r\n4 1\n\nSample Output 2\n\n0\r\n\nThere are cases where no toll needs to be paid.\n\nSample Input 3\n\n2552608206527595 5411232866732612\r\n771856005518028 7206210729152763\n\nSample Output 3\n\n1794977862420151\r\n\nNote that the value to be output may exceed the range of a 32-bit integer.",
        "test_code": ""
    },
    {
        "function_name": "count_non_palindromic_k_substrings_completions",
        "prompt": "You are given a string S of length N consisting of characters A, B, and ?.\nYou are also given a positive integer K.\r\nA string T consisting of A and B is considered a good string if it satisfies the following condition:\n\n- No contiguous substring of length K in T is a palindrome.\n\nLet q be the number of ? characters in S.\r\nThere are 2^q strings that can be obtained by replacing each ? in S with either A or B. Find how many of these strings are good strings.\nThe count can be very large, so find it modulo 998244353.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\r\nS\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq K \\leq N \\leq 1000\n- K \\leq 10\n- S is a string consisting of A, B, and ?.\n- The length of S is N.\n- N and K are integers.\n\nSample Input 1\n\n7 4\r\nAB?A?BA\n\nSample Output 1\n\n1\r\n\nThe given string has two ?s.\r\nThere are four strings obtained by replacing each ? with A or B:\n\n- ABAAABA\n- ABAABBA\n- ABBAABA\n- ABBABBA\n\nAmong these, the last three contain the contiguous substring ABBA of length 4, which is a palindrome, and thus are not good strings.\nTherefore, you should print 1.\n\nSample Input 2\n\n40 7\r\n????????????????????????????????????????\n\nSample Output 2\n\n116295436\r\n\nEnsure to find the number of good strings modulo 998244353.\n\nSample Input 3\n\n15 5\r\nABABA??????????\n\nSample Output 3\n\n0\r\n\nIt is possible that there is no way to replace the ?s to obtain a good string.\n\nSample Input 4\n\n40 8\r\n?A?B??B?B?AA?A?B??B?A???B?BB?B???BA??BAA\n\nSample Output 4\n\n259240",
        "test_code": ""
    },
    {
        "function_name": "calculate_first_nonzero_steps_in_transfer_sequence",
        "prompt": "You are given a sequence of positive integers of length N: H=(H _ 1,H _ 2,\\dotsc,H _ N).\nThere is a sequence of non-negative integers of length N+1: A=(A _ 0,A _ 1,\\dotsc,A _ N). Initially, A _ 0=A _ 1=\\dotsb=A _ N=0.\nPerform the following operations repeatedly on A:\n\n- Increase the value of A _ 0 by 1.\n- For i=1,2,\\ldots,N in this order, perform the following operation:\n- If A _ {i-1}\\gt A _ i and A _ {i-1}\\gt H _ i, decrease the value of A _ {i-1} by 1 and increase the value of A _ i by 1.\n\n\n\nFor each i=1,2,\\ldots,N, find the number of operations before A _ i>0 holds for the first time.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nH _ 1 H _ 2 \\dotsc H _ N\n\nOutput\n\nPrint the answers for i=1,2,\\ldots,N in a single line, separated by spaces.\n\nConstraints\n\n\n- 1\\leq N\\leq2\\times10 ^ 5\n- 1\\leq H _ i\\leq10 ^ 9\\ (1\\leq i\\leq N)\n- All input values are integers.\n\nSample Input 1\n\n5\r\n3 1 4 1 5\n\nSample Output 1\n\n4 5 13 14 26\r\n\nThe first five operations go as follows.\nHere, each row corresponds to one operation, with the leftmost column representing step 1 and the others representing step 2.\n\nFrom this diagram, A _ 1\\gt0 holds for the first time after the 4th operation, and A _ 2\\gt0 holds for the first time after the 5th operation.\nSimilarly, the answers for A _ 3, A _ 4, A _ 5 are 13, 14, 26, respectively.\nTherefore, you should print 4 5 13 14 26.\n\nSample Input 2\n\n6\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n\nSample Output 2\n\n1000000001 2000000001 3000000001 4000000001 5000000001 6000000001\r\n\nNote that the values to be output may not fit within a 32-bit integer.\n\nSample Input 3\n\n15\r\n748 169 586 329 972 529 432 519 408 587 138 249 656 114 632\n\nSample Output 3\n\n749 918 1921 2250 4861 5390 5822 6428 6836 7796 7934 8294 10109 10223 11373",
        "test_code": ""
    },
    {
        "function_name": "is_rice_left_of_miso_soup",
        "prompt": "Takahashi eats three plates for breakfast: rice, miso soup, and salad.\nHis table is long and narrow, so he arranged the three plates in a row. The arrangement is given by a string S, where the i-th plate from the left is rice if S_i is R, miso soup if S_i is M, and salad if S_i is S.\nDetermine whether the plate of rice is to the left of the plate of miso soup.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS\n\nOutput\n\nPrint Yes if the plate of rice is to the left of the plate of miso soup, and No otherwise.\n\nConstraints\n\n\n- |S| = 3\n- S contains one R, one M, and one S.\n\nSample Input 1\n\nRSM\n\nSample Output 1\n\nYes\r\n\nThe plate of rice is at the 1st position from the left, and the plate of miso soup is at the 3rd position from the left. Since the plate of rice is to the left, print Yes.\n\nSample Input 2\n\nSMR\n\nSample Output 2\n\nNo\r\n\nThe plates are arranged as salad, miso soup, and rice from left to right.",
        "test_code": ""
    },
    {
        "function_name": "is_vertical_character_extraction_match",
        "prompt": "You are given two strings S and T consisting of lowercase English letters.\nDetermine if there exists a pair of integers c and w such that 1 \\leq c \\leq w < |S| and the following condition is satisfied. Here, |S| denotes the length of the string S. Note that w must be less than |S|.\n\n- If S is split at every w characters from the beginning, the concatenation of the c-th characters of the substrings of length at least c in order equals T.\n\nInput\n\nThe input is given from Standard Input in the following format:\nS T\n\nOutput\n\nPrint Yes if there exists a pair of integers c and w such that 1 \\leq c \\leq w < |S| and the condition is satisfied, and No otherwise.\n\nConstraints\n\n\n- S and T are strings consisting of lowercase English letters.\n- 1 \\leq |T|  \\leq  |S| \\leq 100\n\nSample Input 1\n\natcoder toe\n\nSample Output 1\n\nYes\n\nIf S is split at every two characters, it looks like this:\nat\nco\nde\nr\n\nThen, the concatenation of the 2nd characters of the substrings of length at least 2 is toe, which equals T. Thus, print Yes.\n\nSample Input 2\n\nbeginner r\n\nSample Output 2\n\nNo\n\nw=|S| is not allowed, and no pair of integers 1 \\leq c \\leq w < |S| satisfies the condition. Thus, print No.\n\nSample Input 3\n\nverticalreading agh\n\nSample Output 3\n\nNo",
        "test_code": ""
    },
    {
        "function_name": "compute_min_item_relocation_cost",
        "prompt": "There are N boxes numbered 1 to N and N items numbered 1 to N. Item i (1 \\leq i \\leq N) is in box A_i and has a weight of W_i.\nYou can repeatedly perform the operation of choosing an item and moving it to another box zero or more times. If the weight of the item being moved is w, the cost of the operation is w.\nFind the minimum total cost required to make each box contain exactly one item.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nA_1 A_2 \\ldots A_N\r\nW_1 W_2 \\ldots W_N\n\nOutput\n\nPrint the minimum total cost required to make each box contain exactly one item.\n\nConstraints\n\n\n-  1 \\leq N \\leq 10^{5}\n-  1 \\leq A_i \\leq N (1 \\leq i \\leq N)\n-  1 \\leq W_i \\leq 10^{4} (1 \\leq i \\leq N)\n- All input values are integers.\n\nSample Input 1\n\n5\r\n2 2 3 3 5\r\n33 40 2 12 16\n\nSample Output 1\n\n35\r\n\nWith the following two moves, you can make each box contain exactly one item:\n\n- Move item 1 from box 2 to box 1. The cost is 33.\n- Move item 3 from box 3 to box 4. The cost is 2.\n\nThe total cost of these two moves is 35. It is impossible to make each box contain exactly one item with a cost less than 35, so print 35.\n\nSample Input 2\n\n12\r\n3 6 7 4 12 4 8 11 11 1 8 11\r\n3925 9785 9752 3587 4013 1117 3937 7045 6437 6208 3391 6309\n\nSample Output 2\n\n17254",
        "test_code": ""
    },
    {
        "function_name": "count_passing_ant_pairs_within_time",
        "prompt": "There are N ants on a number line, labeled 1 to N. Ant i (1 \\leq i \\leq N) starts at coordinate X_i and faces either a positive or negative direction. Initially, all ants are at distinct coordinates. The direction each ant is facing is represented by a binary string S of length N, where ant i is facing the negative direction if S_i is 0 and the positive direction if S_i is 1.\nLet the current time be 0, and the ants move in their respective directions at a speed of 1 unit per unit time for (T+0.1) units of time until time (T+0.1). If multiple ants reach the same coordinate, they pass through each other without changing direction or speed. After (T+0.1) units of time, all ants stop.\nFind the number of pairs (i, j) such that 1 \\leq i < j \\leq N and ants i and j pass each other from now before time (T+0.1).\n\nInput\n\nThe input is given from Standard Input in the following format:\nN T\nS\nX_1 X_2 ... X_N\n\nOutput\n\nPrint the answer.\n\nConstraints\n\n\n- 2 \\leq N \\leq 2 \\times 10^{5}\n- 1 \\leq T \\leq 10^{9}\n- S is a string of length N consisting of 0 and 1.\n- -10^{9} \\leq X_i \\leq 10^{9} (1 \\leq i \\leq N)\n- X_i \\neq X_j (1 \\leq i < j \\leq N)\n- N, T, and X_i (1 \\leq i \\leq N) are integers.\n\nSample Input 1\n\n6 3\n101010\n-5 -1 0 1 2 4\n\nSample Output 1\n\n5\n\nThe following five pairs of ants pass each other:\n\n- Ant 3 and ant 4 pass each other at time 0.5.\n- Ant 5 and ant 6 pass each other at time 1.\n- Ant 1 and ant 2 pass each other at time 2.\n- Ant 3 and ant 6 pass each other at time 2.\n- Ant 1 and ant 4 pass each other at time 3.\n\nNo other pairs of ants pass each other, so print 5.\n\nSample Input 2\n\n13 656320850\n0100110011101\n-900549713 -713494784 -713078652 -687818593 -517374932 -498415009 -472742091 -390030458 -379340552 -237481538 -44636942 352721061 695864366\n\nSample Output 2\n\n14",
        "test_code": ""
    },
    {
        "function_name": "compute_expected_black_ball_position_modulo",
        "prompt": "There are N - 1 white balls and one black ball. These N balls are arranged in a row, with the black ball initially at the leftmost position.\nTakahashi will perform the following operation exactly K times.\n\n- Choose an integer uniformly at random between 1 and N, inclusive, twice. Let a and b the chosen integers. If a \\neq b, swap the a-th and b-th balls from the left.\n\nAfter K operations, let the black ball be at the x-th position from the left. Find the expected value of x, modulo 998244353.\n\n\r\nWhat is expected value modulo 998244353?\r\n\r\nIt can be proved that the sought expected value will always be rational. Additionally, under the constraints of this problem, it can be proved that if this value is expressed as an irreducible fraction \\frac{P}{Q}, then Q \\not \\equiv 0 \\pmod{998244353}. Therefore, there exists a unique integer R such that R \\times Q \\equiv P \\pmod{998244353}, 0 \\leq R < 998244353. Report this R.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN K\n\nOutput\n\nPrint the answer in one line.\n\nConstraints\n\n\n- 1 \\leq N \\leq 998244352\n- 1 \\leq K \\leq 10^5\n\nSample Input 1\n\n2 1\n\nSample Output 1\n\n499122178\r\n\nAfter one operation, the probabilities that the black ball is at the 1st position and the 2nd position from the left are both \\displaystyle \\frac{1}{2}. Thus, the expected value is \\displaystyle \\frac{3}{2}.\n\nSample Input 2\n\n3 2\n\nSample Output 2\n\n554580198\n\nSample Input 3\n\n4 4\n\nSample Output 3\n\n592707587",
        "test_code": ""
    },
    {
        "function_name": "min_adjacent_swaps_to_semi_order_permutation",
        "prompt": "You are given a 0-indexed permutation of n integers nums.\nA permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation:\n\nPick two adjacent elements in nums, then swap them.\n\nReturn the minimum number of operations to make nums a semi-ordered permutation.\nA permutation is a sequence of integers from 1 to n of length n containing each number exactly once.\n \nExample 1:\n\nInput: nums = [2,1,4,3]\nOutput: 2\nExplanation: We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation. \n\nExample 2:\n\nInput: nums = [2,4,1,3]\nOutput: 3\nExplanation: We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.\n\nExample 3:\n\nInput: nums = [1,3,4,2,5]\nOutput: 0\nExplanation: The permutation is already a semi-ordered permutation.\n\n \nConstraints:\n\n2 <= nums.length == n <= 50\n1 <= nums[i] <= 50\nnums is a permutation.",
        "test_code": ""
    },
    {
        "function_name": "longest_semi_repetitive_substring_length",
        "prompt": "You are given a 0-indexed string s that consists of digits from 0 to 9.\nA string t is called a semi-repetitive if there is at most one consecutive pair of the same digits inside t. For example, 0010, 002020, 0123, 2002, and 54944 are semi-repetitive while 00101022, and 1101234883 are not.\nReturn the length of the longest semi-repetitive substring inside s.\nA substring is a contiguous non-empty sequence of characters within a string.\n \nExample 1:\n\nInput: s = \"52233\"\nOutput: 4\nExplanation: The longest semi-repetitive substring is \"5223\", which starts at i = 0 and ends at j = 3. \n\nExample 2:\n\nInput: s = \"5494\"\nOutput: 4\nExplanation: s is a semi-reptitive string, so the answer is 4.\n\nExample 3:\n\nInput: s = \"1111111\"\nOutput: 2\nExplanation: The longest semi-repetitive substring is \"11\", which starts at i = 0 and ends at j = 1.\n\n \nConstraints:\n\n1 <= s.length <= 50\n'0' <= s[i] <= '9'",
        "test_code": ""
    },
    {
        "function_name": "identify_ball_game_losers",
        "prompt": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the i^th friend brings you to the (i+1)^th friend for 1 <= i < n, and moving clockwise from the n^th friend brings you to the 1^st friend.\nThe rules of the game are as follows:\n1^st friend receives the ball.\n\nAfter that, 1^st friend passes it to the friend who is k steps away from them in the clockwise direction.\nAfter that, the friend who receives the ball should pass it to the friend who is 2 * k steps away from them in the clockwise direction.\nAfter that, the friend who receives the ball should pass it to the friend who is 3 * k steps away from them in the clockwise direction, and so on and so forth.\n\nIn other words, on the i^th turn, the friend holding the ball should pass it to the friend who is i * k steps away from them in the clockwise direction.\nThe game is finished when some friend receives the ball for the second time.\nThe losers of the game are friends who did not receive the ball in the entire game.\nGiven the number of friends, n, and an integer k, return the array answer, which contains the losers of the game in the ascending order.\n \nExample 1:\n\nInput: n = 5, k = 2\nOutput: [4,5]\nExplanation: The game goes as follows:\n1) Start at 1^st friend and pass the ball to the friend who is 2 steps away from them - 3^rd friend.\n2) 3^rd friend passes the ball to the friend who is 4 steps away from them - 2^nd friend.\n3) 2^nd friend passes the ball to the friend who is 6 steps away from them  - 3^rd friend.\n4) The game ends as 3^rd friend receives the ball for the second time.\n\nExample 2:\n\nInput: n = 4, k = 4\nOutput: [2,3,4]\nExplanation: The game goes as follows:\n1) Start at the 1^st friend and pass the ball to the friend who is 4 steps away from them - 1^st friend.\n2) The game ends as 1^st friend receives the ball for the second time.\n\n \nConstraints:\n\n1 <= k <= n <= 50",
        "test_code": ""
    },
    {
        "function_name": "is_valid_original_from_xor_cycle",
        "prompt": "A 0-indexed array derived with length n is derived by computing the bitwise XOR (\u2295) of adjacent values in a binary array original of length n.\nSpecifically, for each index i in the range [0, n - 1]:\n\nIf i = n - 1, then derived[i] = original[i] \u2295 original[0].\nOtherwise, derived[i] = original[i] \u2295 original[i + 1].\n\nGiven an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived.\nReturn true if such an array exists or false otherwise.\n\nA binary array is an array containing only 0's and 1's\n\n \nExample 1:\n\nInput: derived = [1,1,0]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1,0].\nderived[0] = original[0] \u2295 original[1] = 0 \u2295 1 = 1 \nderived[1] = original[1] \u2295 original[2] = 1 \u2295 0 = 1\nderived[2] = original[2] \u2295 original[0] = 0 \u2295 0 = 0\n\nExample 2:\n\nInput: derived = [1,1]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1].\nderived[0] = original[0] \u2295 original[1] = 1\nderived[1] = original[1] \u2295 original[0] = 1\n\nExample 3:\n\nInput: derived = [1,0]\nOutput: false\nExplanation: There is no valid original array that gives derived.\n\n \nConstraints:\n\nn == derived.length\n1 <= n <= 10^5\nThe values in derived are either 0's or 1's",
        "test_code": ""
    },
    {
        "function_name": "minimize_string_length_by_removing_ab_cd",
        "prompt": "You are given a string s consisting only of uppercase English letters.\nYou can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings \"AB\" or \"CD\" from s.\nReturn the minimum possible length of the resulting string that you can obtain.\nNote that the string concatenates after removing the substring and could produce new \"AB\" or \"CD\" substrings.\n \nExample 1:\n\nInput: s = \"ABFCACDB\"\nOutput: 2\nExplanation: We can do the following operations:\n- Remove the substring \"ABFCACDB\", so s = \"FCACDB\".\n- Remove the substring \"FCACDB\", so s = \"FCAB\".\n- Remove the substring \"FCAB\", so s = \"FC\".\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain.\nExample 2:\n\nInput: s = \"ACBBD\"\nOutput: 5\nExplanation: We cannot do any operations on the string so the length remains the same.\n\n \nConstraints:\n\n1 <= s.length <= 100\ns consists only of uppercase English letters.",
        "test_code": ""
    },
    {
        "function_name": "calculate_partition_square_sum",
        "prompt": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\n1 <= i <= n\nThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.\n\n \nExample 1:\n\nInput: n = 10\nOutput: 182\nExplanation: There are exactly 3 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1\n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.\n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.\nHence, the punishment number of 10 is 1 + 81 + 100 = 182\n\nExample 2:\n\nInput: n = 37\nOutput: 1478\nExplanation: There are exactly 4 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1. \n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. \n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. \n- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\nHence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478\n\n \nConstraints:\n\n1 <= n <= 1000",
        "test_code": ""
    },
    {
        "function_name": "calculate_minimum_painting_cost",
        "prompt": "You are given two 0-indexed integer arrays, cost and time, of size n representing the costs and the time taken to paint n different walls respectively. There are two painters available:\n\nA paid painter that paints the i^th wall in time[i] units of time and takes cost[i] units of money.\nA free painter that paints any wall in 1 unit of time at a cost of 0. But the free painter can only be used if the paid painter is already occupied.\n\nReturn the minimum amount of money required to paint the n walls.\n \nExample 1:\n\nInput: cost = [1,2,3,2], time = [1,2,3,2]\nOutput: 3\nExplanation: The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3.\n\nExample 2:\n\nInput: cost = [2,3,4,2], time = [1,1,1,1]\nOutput: 4\nExplanation: The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4.\n\n \nConstraints:\n\n1 <= cost.length <= 500\ncost.length == time.length\n1 <= cost[i] <= 10^6\n1 <= time[i] <= 500",
        "test_code": ""
    },
    {
        "function_name": "minimize_chocolate_collection_cost",
        "prompt": "You are given a 0-indexed integer array nums of size n representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index i is nums[i]. Each chocolate is of a different type, and initially, the chocolate at the index i is of i^th type.\nIn one operation, you can do the following with an incurred cost of x:\n\nSimultaneously change the chocolate of i^th type to ((i + 1) mod n)^th type for all chocolates.\n\nReturn the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.\n \nExample 1:\n\nInput: nums = [20,1,15], x = 5\nOutput: 13\nExplanation: Initially, the chocolate types are [0,1,2]. We will buy the 1^st type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2^nd^ type of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0^th type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal.\n\nExample 2:\n\nInput: nums = [1,2,3], x = 4\nOutput: 6\nExplanation: We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 10^9\n1 <= x <= 10^9",
        "test_code": ""
    },
    {
        "function_name": "compute_min_sum_k_avoiding_array",
        "prompt": "You are given two integers, n and k.\nAn array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k.\nReturn the minimum possible sum of a k-avoiding array of length n.\n \nExample 1:\n\nInput: n = 5, k = 4\nOutput: 18\nExplanation: Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.\n\nExample 2:\n\nInput: n = 2, k = 6\nOutput: 3\nExplanation: We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.\n\n \nConstraints:\n\n1 <= n, k <= 50",
        "test_code": ""
    },
    {
        "function_name": "calculate_max_achievable_number",
        "prompt": "You are given two integers, num and t.\nAn integer x is called achievable if it can become equal to num after applying the following operation no more than t times:\n\nIncrease or decrease x by 1, and simultaneously increase or decrease num by 1.\n\nReturn the maximum possible achievable number. It can be proven that there exists at least one achievable number.\n \nExample 1:\n\nInput: num = 4, t = 1\nOutput: 6\nExplanation: The maximum achievable number is x = 6; it can become equal to num after performing this operation:\n1- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5. \nIt can be proven that there is no achievable number larger than 6.\n\n\nExample 2:\n\nInput: num = 3, t = 2\nOutput: 7\nExplanation: The maximum achievable number is x = 7; after performing these operations, x will equal num: \n1- Decrease x by 1, and increase num by 1. Now, x = 6 and num = 4.\n2- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5.\nIt can be proven that there is no achievable number larger than 7.\n\n \nConstraints:\n\n1 <= num, t <= 50",
        "test_code": ""
    },
    {
        "function_name": "make_min_operations_lex_smallest_palindrome",
        "prompt": "You are given a string s consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in s with another lowercase English letter.\nYour task is to make s a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nReturn the resulting palindrome string.\n \nExample 1:\n\nInput: s = \"egcfe\"\nOutput: \"efcfe\"\nExplanation: The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'.\n\nExample 2:\n\nInput: s = \"abcd\"\nOutput: \"abba\"\nExplanation: The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\".\n\nExample 3:\n\nInput: s = \"seven\"\nOutput: \"neven\"\nExplanation: The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\".\n\n \nConstraints:\n\n1 <= s.length <= 1000\ns consists of only lowercase English letters.",
        "test_code": ""
    },
    {
        "function_name": "minimize_binary_uniformity_cost",
        "prompt": "You are given a 0-indexed binary string s of length n on which you can apply two types of operations:\n\nChoose an index i and invert all characters from index 0 to index i (both inclusive), with a cost of i + 1\nChoose an index i and invert all characters from index i to index n - 1 (both inclusive), with a cost of n - i\n\nReturn the minimum cost to make all characters of the string equal.\nInvert a character means if its value is '0' it becomes '1' and vice-versa.\n \nExample 1:\n\nInput: s = \"0011\"\nOutput: 2\nExplanation: Apply the second operation with i = 2 to obtain s = \"0000\" for a cost of 2. It can be shown that 2 is the minimum cost to make all characters equal.\n\nExample 2:\n\nInput: s = \"010101\"\nOutput: 9\nExplanation: Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3.\nApply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2. \nApply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1. \nApply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2.\nApply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1. \nThe total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal.\n\n \nConstraints:\n\n1 <= s.length == n <= 10^5\ns[i] is either '0' or '1'",
        "test_code": ""
    },
    {
        "function_name": "remove_trailing_zeros_from_string_number",
        "prompt": "Given a positive integer num represented as a string, return the integer num without trailing zeros as a string.\n \nExample 1:\n\nInput: num = \"51230100\"\nOutput: \"512301\"\nExplanation: Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\".\n\nExample 2:\n\nInput: num = \"123\"\nOutput: \"123\"\nExplanation: Integer \"123\" has no trailing zeros, we return integer \"123\".\n\n \nConstraints:\n\n1 <= num.length <= 1000\nnum consists of only digits.\nnum doesn't have any leading zeros.",
        "test_code": ""
    },
    {
        "function_name": "is_fascinating_three_digit_number",
        "prompt": "You are given an integer n that consists of exactly 3 digits.\nWe call the number n fascinating if, after the following modification, the resulting number contains all the digits from 1 to 9 exactly once and does not contain any 0's:\n\nConcatenate n with the numbers 2 * n and 3 * n.\n\nReturn true if n is fascinating, or false otherwise.\nConcatenating two numbers means joining them together. For example, the concatenation of 121 and 371 is 121371.\n \nExample 1:\n\nInput: n = 192\nOutput: true\nExplanation: We concatenate the numbers n = 192 and 2 * n = 384 and 3 * n = 576. The resulting number is 192384576. This number contains all the digits from 1 to 9 exactly once.\n\nExample 2:\n\nInput: n = 100\nOutput: false\nExplanation: We concatenate the numbers n = 100 and 2 * n = 200 and 3 * n = 300. The resulting number is 100200300. This number does not satisfy any of the conditions.\n\n \nConstraints:\n\n100 <= n <= 999",
        "test_code": ""
    },
    {
        "function_name": "minimize_string_length_by_erasing_adjacent_duplicates",
        "prompt": "Given a 0-indexed string s, repeatedly perform the following operation any number of times:\n\nChoose an index i in the string, and let c be the character in position i. Delete the closest occurrence of c to the left of i (if any) and the closest occurrence of c to the right of i (if any).\n\nYour task is to minimize the length of s by performing the above operation any number of times.\nReturn an integer denoting the length of the minimized string.\n \nExample 1:\n\nInput: s = \"aaabc\"\nOutput: 3\nExplanation: In this example, s is \"aaabc\". We can start by selecting the character 'a' at index 1. We then remove the closest 'a' to the left of index 1, which is at index 0, and the closest 'a' to the right of index 1, which is at index 2. After this operation, the string becomes \"abc\". Any further operation we perform on the string will leave it unchanged. Therefore, the length of the minimized string is 3.\nExample 2:\n\nInput: s = \"cbbd\"\nOutput: 3\nExplanation: For this we can start with character 'b' at index 1. There is no occurrence of 'b' to the left of index 1, but there is one to the right at index 2, so we delete the 'b' at index 2. The string becomes \"cbd\" and further operations will leave it unchanged. Hence, the minimized length is 3. \n\nExample 3:\n\nInput: s = \"dddaaa\"\nOutput: 2\nExplanation: For this, we can start with the character 'd' at index 1. The closest occurrence of a 'd' to its left is at index 0, and the closest occurrence of a 'd' to its right is at index 2. We delete both index 0 and 2, so the string becomes \"daaa\". In the new string, we can select the character 'a' at index 2. The closest occurrence of an 'a' to its left is at index 1, and the closest occurrence of an 'a' to its right is at index 3. We delete both of them, and the string becomes \"da\". We cannot minimize this further, so the minimized length is 2.\n\n \n \nConstraints:\n\n1 <= s.length <= 100\ns contains only lowercase English letters",
        "test_code": ""
    },
    {
        "function_name": "can_traverse_all_indices_with_gcd_path",
        "prompt": "You are given a 0-indexed integer array nums, and you are allowed to traverse between its indices. You can traverse between index i and index j, i != j, if and only if gcd(nums[i], nums[j]) > 1, where gcd is the greatest common divisor.\nYour task is to determine if for every pair of indices i and j in nums, where i < j, there exists a sequence of traversals that can take us from i to j.\nReturn true if it is possible to traverse between all such pairs of indices, or false otherwise.\n \nExample 1:\n\nInput: nums = [2,3,6]\nOutput: true\nExplanation: In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1.\n\nExample 2:\n\nInput: nums = [3,9,5]\nOutput: false\nExplanation: No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.\n\nExample 3:\n\nInput: nums = [4,3,12,8]\nOutput: true\nExplanation: There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5",
        "test_code": ""
    },
    {
        "function_name": "minimize_string_by_shifting_substring",
        "prompt": "You are given a string s consisting of only lowercase English letters. In one operation, you can do the following:\n\nSelect any non-empty substring of s, possibly the entire string, then replace each one of its characters with the previous character of the English alphabet. For example, 'b' is converted to 'a', and 'a' is converted to 'z'.\n\nReturn the lexicographically smallest string you can obtain after performing the above operation exactly once.\nA substring is a contiguous sequence of characters in a string.\nA string x is lexicographically smaller than a string y of the same length if x[i] comes before y[i] in alphabetic order for the first position i such that x[i] != y[i].\n \nExample 1:\n\nInput: s = \"cbabc\"\nOutput: \"baabc\"\nExplanation: We apply the operation on the substring starting at index 0, and ending at index 1 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n\nExample 2:\n\nInput: s = \"acbbc\"\nOutput: \"abaab\"\nExplanation: We apply the operation on the substring starting at index 1, and ending at index 4 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n\nExample 3:\n\nInput: s = \"leetcode\"\nOutput: \"kddsbncd\"\nExplanation: We apply the operation on the entire string. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n \nConstraints:\n\n1 <= s.length <= 3 * 10^5\ns consists of lowercase English letters",
        "test_code": ""
    },
    {
        "function_name": "count_beautiful_coprime_index_pairs",
        "prompt": "You are given a 0-indexed integer array nums. A pair of indices i, j where 0 <= i < j < nums.length is called beautiful if the first digit of nums[i] and the last digit of nums[j] are coprime.\nReturn the total number of beautiful pairs in nums.\nTwo integers x and y are coprime if there is no integer greater than 1 that divides both of them. In other words, x and y are coprime if gcd(x, y) == 1, where gcd(x, y) is the greatest common divisor of x and y.\n \nExample 1:\n\nInput: nums = [2,5,1,4]\nOutput: 5\nExplanation: There are 5 beautiful pairs in nums:\nWhen i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1.\nWhen i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1.\nWhen i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1.\nWhen i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1.\nThus, we return 5.\n\nExample 2:\n\nInput: nums = [11,21,12]\nOutput: 2\nExplanation: There are 2 beautiful pairs:\nWhen i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1.\nThus, we return 2.\n\n \nConstraints:\n\n2 <= nums.length <= 100\n1 <= nums[i] <= 9999\nnums[i] % 10 != 0",
        "test_code": ""
    },
    {
        "function_name": "longest_equal_subarray_after_deletions",
        "prompt": "You are given a 0-indexed integer array nums and an integer k.\nA subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.\nReturn the length of the longest possible equal subarray after deleting at most k elements from nums.\nA subarray is a contiguous, possibly empty sequence of elements within an array.\n \nExample 1:\n\nInput: nums = [1,3,2,3,1,3], k = 3\nOutput: 3\nExplanation: It's optimal to delete the elements at index 2 and index 4.\nAfter deleting them, nums becomes equal to [1, 3, 3, 3].\nThe longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\nIt can be proven that no longer equal subarrays can be created.\n\nExample 2:\n\nInput: nums = [1,1,2,2,1,1], k = 2\nOutput: 4\nExplanation: It's optimal to delete the elements at index 2 and index 3.\nAfter deleting them, nums becomes equal to [1, 1, 1, 1].\nThe array itself is an equal subarray, so the answer is 4.\nIt can be proven that no longer equal subarrays can be created.\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= nums[i] <= nums.length\n0 <= k <= nums.length",
        "test_code": ""
    },
    {
        "function_name": "count_servers_with_no_requests_in_window",
        "prompt": "You are given an integer n denoting the total number of servers and a 2D 0-indexed integer array logs, where logs[i] = [server_id, time] denotes that the server with id server_id received a request at time time.\nYou are also given an integer x and a 0-indexed integer array queries.\nReturn a 0-indexed integer array arr of length queries.length where arr[i] represents the number of servers that did not receive any requests during the time interval [queries[i] - x, queries[i]].\nNote that the time intervals are inclusive.\n \nExample 1:\n\nInput: n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]\nOutput: [1,2]\nExplanation: \nFor queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.\nFor queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period.\n\n\nExample 2:\n\nInput: n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]\nOutput: [0,1]\nExplanation: \nFor queries[0]: All servers get at least one request in the duration of [1, 3].\nFor queries[1]: Only server with id 3 gets no request in the duration [2,4].\n\n\n \nConstraints:\n\n1 <= n <= 10^5\n1 <= logs.length <= 10^5\n1 <= queries.length <= 10^5\nlogs[i].length == 2\n1 <= logs[i][0] <= n\n1 <= logs[i][1] <= 10^6\n1 <= x <= 10^5\nx < queries[i] <= 10^6",
        "test_code": ""
    },
    {
        "function_name": "update_and_sort_marble_positions",
        "prompt": "You are given a 0-indexed integer array nums representing the initial positions of some marbles. You are also given two 0-indexed integer arrays moveFrom and moveTo of equal length.\nThroughout moveFrom.length steps, you will change the positions of the marbles. On the i^th step, you will move all marbles at position moveFrom[i] to position moveTo[i].\nAfter completing all the steps, return the sorted list of occupied positions.\nNotes:\n\nWe call a position occupied if there is at least one marble in that position.\nThere may be multiple marbles in a single position.\n\n \nExample 1:\n\nInput: nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\nOutput: [5,6,8,9]\nExplanation: Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9].\nExample 2:\n\nInput: nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\nOutput: [2]\nExplanation: Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2].\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n1 <= moveFrom.length <= 10^5\nmoveFrom.length == moveTo.length\n1 <= nums[i], moveFrom[i], moveTo[i] <= 10^9\nThe test cases are generated such that there is at least a marble in moveFrom[i] at the moment we want to apply the i^th move.",
        "test_code": ""
    },
    {
        "function_name": "min_operations_to_zero_with_exponent_offset",
        "prompt": "You are given two integers num1 and num2.\nIn one operation, you can choose integer i in the range [0, 60] and subtract 2^i + num2 from num1.\nReturn the integer denoting the minimum number of operations needed to make num1 equal to 0.\nIf it is impossible to make num1 equal to 0, return -1.\n \nExample 1:\n\nInput: num1 = 3, num2 = -2\nOutput: 3\nExplanation: We can make 3 equal to 0 with the following operations:\n- We choose i = 2 and substract 2^2 + (-2) from 3, 3 - (4 + (-2)) = 1.\n- We choose i = 2 and substract 2^2 + (-2) from 1, 1 - (4 + (-2)) = -1.\n- We choose i = 0 and substract 2^0 + (-2) from -1, (-1) - (1 + (-2)) = 0.\nIt can be proven, that 3 is the minimum number of operations that we need to perform.\n\nExample 2:\n\nInput: num1 = 5, num2 = 7\nOutput: -1\nExplanation: It can be proven, that it is impossible to make 5 equal to 0 with the given operation.\n\n \nConstraints:\n\n1 <= num1 <= 10^9\n-10^9 <= num2 <= 10^9",
        "test_code": ""
    },
    {
        "function_name": "find_max_sum_with_min_constraints",
        "prompt": "You are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [x_i, y_i].\nFor the i^th query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= x_i and nums2[j] >= y_i, or -1 if there is no j satisfying the constraints.\nReturn an array answer where answer[i] is the answer to the i^th query.\n \nExample 1:\n\nInput: nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]\nOutput: [6,10,7]\nExplanation: \nFor the 1st query x_i = 4 and y_i = 1, we can select index j = 0 since nums1[j] >= 4 and nums2[j] >= 1. The sum nums1[j] + nums2[j] is 6, and we can show that 6 is the maximum we can obtain.\n\nFor the 2nd query x_i = 1 and y_i = 3, we can select index j = 2 since nums1[j] >= 1 and nums2[j] >= 3. The sum nums1[j] + nums2[j] is 10, and we can show that 10 is the maximum we can obtain. \n\nFor the 3rd query x_i = 2 and y_i = 5, we can select index j = 3 since nums1[j] >= 2 and nums2[j] >= 5. The sum nums1[j] + nums2[j] is 7, and we can show that 7 is the maximum we can obtain.\n\nTherefore, we return [6,10,7].\n\nExample 2:\n\nInput: nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]\nOutput: [9,9,9]\nExplanation: For this example, we can use index j = 2 for all the queries since it satisfies the constraints for each query.\n\nExample 3:\n\nInput: nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]\nOutput: [-1]\nExplanation: There is one query in this example with x_i = 3 and y_i = 3. For every index, j, either nums1[j] < x_i or nums2[j] < y_i. Hence, there is no solution. \n\n \nConstraints:\n\nnums1.length == nums2.length \nn == nums1.length \n1 <= n <= 10^5\n1 <= nums1[i], nums2[i] <= 10^9 \n1 <= queries.length <= 10^5\nqueries[i].length == 2\nx_i == queries[i][1]\ny_i == queries[i][2]\n1 <= x_i, y_i <= 10^9",
        "test_code": ""
    },
    {
        "function_name": "sum_of_squares_of_elements_at_divisors_of_length",
        "prompt": "You are given a 1-indexed integer array nums of length n.\nAn element nums[i] of nums is called special if i divides n, i.e. n % i == 0.\nReturn the sum of the squares of all special elements of nums.\n \nExample 1:\n\nInput: nums = [1,2,3,4]\nOutput: 21\nExplanation: There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.  \n\nExample 2:\n\nInput: nums = [2,7,1,19,18,3]\nOutput: 63\nExplanation: There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63. \n\n \nConstraints:\n\n1 <= nums.length == n <= 50\n1 <= nums[i] <= 50",
        "test_code": ""
    },
    {
        "function_name": "minimize_max_diff_between_partition_extremes",
        "prompt": "You are given a positive integer array nums.\nPartition nums into two arrays, nums1 and nums2, such that:\n\nEach element of the array nums belongs to either the array nums1 or the array nums2.\nBoth arrays are non-empty.\nThe value of the partition is minimized.\n\nThe value of the partition is |max(nums1) - min(nums2)|.\nHere, max(nums1) denotes the maximum element of the array nums1, and min(nums2) denotes the minimum element of the array nums2.\nReturn the integer denoting the value of such partition.\n \nExample 1:\n\nInput: nums = [1,3,2,4]\nOutput: 1\nExplanation: We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].\n- The maximum element of the array nums1 is equal to 2.\n- The minimum element of the array nums2 is equal to 3.\nThe value of the partition is |2 - 3| = 1. \nIt can be proven that 1 is the minimum value out of all partitions.\n\nExample 2:\n\nInput: nums = [100,1,10]\nOutput: 9\nExplanation: We can partition the array nums into nums1 = [10] and nums2 = [100,1].\n- The maximum element of the array nums1 is equal to 10.\n- The minimum element of the array nums2 is equal to 1.\nThe value of the partition is |10 - 1| = 9.\nIt can be proven that 9 is the minimum value out of all partitions.\n\n \nConstraints:\n\n2 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9",
        "test_code": ""
    },
    {
        "function_name": "count_max_reversed_string_pairs",
        "prompt": "You are given a 0-indexed array words consisting of distinct strings.\nThe string words[i] can be paired with the string words[j] if:\n\nThe string words[i] is equal to the reversed string of words[j].\n0 <= i < j < words.length.\n\nReturn the maximum number of pairs that can be formed from the array words.\nNote that each string can belong in at most one pair.\n \nExample 1:\n\nInput: words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]\nOutput: 2\nExplanation: In this example, we can form 2 pair of strings in the following way:\n- We pair the 0^th string with the 2^nd string, as the reversed string of word[0] is \"dc\" and is equal to words[2].\n- We pair the 1^st string with the 3^rd string, as the reversed string of word[1] is \"ca\" and is equal to words[3].\nIt can be proven that 2 is the maximum number of pairs that can be formed.\nExample 2:\n\nInput: words = [\"ab\",\"ba\",\"cc\"]\nOutput: 1\nExplanation: In this example, we can form 1 pair of strings in the following way:\n- We pair the 0^th string with the 1^st string, as the reversed string of words[1] is \"ab\" and is equal to words[0].\nIt can be proven that 1 is the maximum number of pairs that can be formed.\n\nExample 3:\n\nInput: words = [\"aa\",\"ab\"]\nOutput: 0\nExplanation: In this example, we are unable to form any pair of strings.\n\n \nConstraints:\n\n1 <= words.length <= 50\nwords[i].length == 2\nwords consists of distinct strings.\nwords[i] contains only lowercase English letters.",
        "test_code": ""
    }
]